*outline.txt*                         A trivial and imprecise outline viewer.

               _                            _   _ _             ~
              (_)                          | | | (_)            ~
        __   ___ _ __ ___ ______ ___  _   _| |_| |_ _ __   ___  ~
        \ \ / / | '_ ` _ \______/ _ \| | | | __| | | '_ \ / _ \  ~
         \ V /| | | | | | |    | (_) | |_| | |_| | | | | |  __/  ~
          \_/ |_|_| |_| |_|     \___/ \__,_|\__|_|_|_| |_|\___|  ~
                                                                ~

==============================================================================
CONTENTS                                                     *OutlineContents*

    1. Introduction ................. |OutlineIntroduction|
    2. Requirements ................. |OutlineRequirements|
    3. Usage ........................ |OutlineUsage|
        3.1 Commands ................ |OutlineCommands|
        3.2 Mappings ................ |OutlineMappings|
    4. Configuration ................ |OutlineConfiguration|
    5. Add new languages ............ |OutlineNewLanguages|
    6. Contributing ................. |OutlineContributing|
    7. Frequently-asked questions ... |OutlineFAQ|
    8. License ...................... |OutlineLicense|


==============================================================================
INTRODUCTION                                          *OutlineIntroduction*

Vim-outline parse the current buffer through a set of user-defined regex
and/or parsing functions and slam the result in a side window.
That's all!

Well, in reality it is not, in-fact Vim-outline further provides you with the
following features:

    a. Locate your current position with respect to the outline,
    b. Jump from outline entries to the corresponding buffer lines,
    c. Feed you with random motivational quotes picked from our quotes
       database if a 'filetype' is not supported. [Cringe mode ON!]

At the time I was working with Python and Vim9script, hence only Python and
Vim9Script are the only language supported at the moment, but you
can easily add other languages. See |OutlineAddNewLanguages|.

I wrote vim-outline mainly for myself because I had some issue when using
Vista with ALE and Tagbar is based on tags, which is a feature that I don't
really use.

What I needed was something easily configurable, fast and reliable that just
support me to get my job done, no matter if lacks bells and whistles and if
the outcome is just an imprecise sketch of my buffer with noisy entries.

==============================================================================
REQUIREMENTS                                         *OutlineRequirements*

Outline is written in Vim9script, therefore you need at least Vim 9.0.
That is pretty much all. No ctags, nor LSP servers required.

==============================================================================
USAGE                                                     *OutlineUsage*

Run |:OutlineToggle| to open/close a side-window with an outline of your
current buffer.

Run |:OutlineGoToOutline| to jump on the outline window.
This command comes handy when you have many windows open in the same tab
and you want to jump directly to the outline window with one key-press.
It is suggested that you run |:OutlineRefresh| before jumping on the outline
window.

Run |:OutlineRefresh| to update both the outline and the highlighting.

Note: The refresh is asynchronous. This means that you have to manually
run |:OutlineRefresh| to update outline & localization while you are editing
your file.
However, outline & localization are automatically updated in response to a
newly opened Outline window.

I was thinking to continuously update the highlighting but that would require
calling a number of functions at every single text change: Mr laggy is just
behind the corner!

You are not satisfied with the result?
No worries! Feel free to configure outline with your own regular expressions
by adjusting the dictionaries |g:outline_pattern_to_include|,
|g:outline_include_before_exclude| and |g:outline_pattern_to_exclude|.

Still not satisfied?
If the sole utilization of regex won't give you satisfactory outlines, you
can use a function to pre-process your buffer before filtering it through the
regex defined in |g:outline_pattern_to_include| and
|g:outline_pattern_to_exclude|. See |b:OutlinePreProcess| for more info.

It is still to hard to get a decent outline. Is there any brute-force
method that one can use?
Yes, you can use a brute-force method to outline only the lines that you
explicitly mark. Take a look at |OutlineFAQ| to discover how to do that.

==============================================================================
COMMANDS                                                     *OutlineCommands*

                                                        *:OutlineToggle*
:OutlineToggle               Open and close the side-window outline.

                                                        *:OutlineRefresh*
:OutlineRefresh              Refresh the outline side-window.

                                                        *:OutlineGoToOutline*
:OutlineGoToOutline          Jump into the outline side-window independently
                             of the current buffer. You should refresh your
                             outline before using this command.

==============================================================================
MAPPINGS                                                *OutlineMappings*

<F8>   or   <Plug>OutlineToggle
Open and close the side-window outline.

<leader>l   or   <Plug>OutlineRefresh
Refresh the outline side-window and the localization.

<leader>o   or   <Plug>OutlineGoToOutline
Jump into the outline side-window independently of the current buffer.

==============================================================================
CONFIGURATION                                        *OutlineConfiguration*

Vim-outline working principle is quite straightforward: for each 'filetype'
you specify a set of regex and an outline will be displayed in a side-window
upon call from the user.

                                                        *g:outline_buf_name*
Type: 'string'
Default: "Outline!"
Name of the Outline buffer.

                                                        *g:outline_autoclose*
Type: 'bool'
Default: true
If true, automatically close the outline window when you leave it.

                                                        *g:outline_win_size*
Type: 'number'
Default: 30
Size of the outline window in number of columns unit.

                                                *g:outline_enable_highlight*
Type: 'bool'
Default: true
Enable (true) or disable (false) the highlighting.

                                            *g:outline_include_before_exclude*
Type: 'dict'<'filetype', 'bool'>
Default:{"python": false,
            \ "vim": false}
Determine the execution order of the patterns defined in
|g:outline_pattern_to_include| and |g:outline_pattern_to_exclude| when parsing
a buffer for generating an outline.

                                            *g:outline_pattern_to_include*
Type: 'dict'<'filetype', 'list'<'string'>>
Default:{ \ "python": ['^class', '^\s*def'],
               "vim": ['^\s*export', '^\s*def',
                      \ '^\S*map','^\s*\(autocmd\|autocommand\)',
                      \ '^\s*\(command\|cmd\)',
                      \ '^\s*sign ' ]}
Patterns to include when parsing a buffer to generate an outline.
Note: the default values will be overwritten!

                                            *g:outline_pattern_to_exclude*
Type: 'dict'<'filetype', 'list'<'string'>>
Default:{ "python": ['^\s*def\s_\{-1,2}'],
         \ "vim": ['^\s*#']}
Patterns to exclude when parsing a buffer to generate an outline.
Note: the default values will be overwritten!

                                                *b:OutlinePreProcess*
Type: 'Funcref'
Default:

The function pointed by such a 'Funcref' manipulate the current buffer before
applying the regex defined in |g:outline_pattern_to_include| and
|g:outline_pattern_to_exclude| and must meet the following requirements:

    1. Accept one input argument that is the current
       buffer lines expressed as a list of strings and return an outline as a
       list of strings,
    2. Exist only for the vim-outline supported 'filetype', and therefore you
       have to define it some /ftplugin folder.

Example
You have a /ftplugin/myfiletype.vim with the following content
>
   def MyFunc(outline: list<string>): list<string>
       # do something
       return modified_outline

   b:OutlinePreProcess = MyFunc
<
the modified_outline list will be filtered through the specified regex.
This allow the user to not rely only on regex but it provides the opportunity
of using conditionals, iterations, etc. for parsing the current buffer before
using regex.

==============================================================================
ADD NEW LANGUAGES                                       *OutlineNewLanguages*

*THIS IS FOR DEVELOPERS!*

To add a new language, you have to perform the following steps:

    a. Duplicate any existing file in /ftplugin and update it by changing the
    hard-coded 'filetype' information.
    b. Duplicate any existing file in /lib/ftfunctions and update it by
    changing the hard-coded 'filetype' information.
    c. Update the dictionaries |g:outline_pattern_to_include|,
    |g:outline_pattern_to_exclude| and |g:outline_include_before_exclude| with
    new regex.
    d. Test if it works!

Note: the regex defined in the |g:outline_pattern_to_include| and
|g:outline_pattern_to_exclude| scan the buffer line-by-line and it may be
difficult to write regex when you have to, for example, remove blocks of lines
(think for example to Python docstrings).
In that case, it is possible to pre-process the buffer content through the
OutlinePreProcessInternal function other than the one(s) referred by
|b:OutlinePreProcess|. Both the functions serve for the same purposes, but
while the former is for internal use and shall not be exposed to the user, the
latter can be freely used by the user. See /lib/ftplugin/python.vim for an
example of how to use OutlinePreProcessInternal.

==============================================================================
FREQUENTLY ASKED QUESTIONS                                     *OutlineFAQ*

Q. Can I use vim-outline for some language that is not supported yet?
A. Yes, it should work with a very ugly hack. I hope it won't bother you too
much!

As an example, I'll show you how to hack it for .cpp files, but the
same principle should apply, mutatis-mutandis, to any other filetype.

#### Step 1
Create a cpp.vim file in .vim/ftplugin with the following content

>
    vim9script

    def FilterOutline(outline: list<string>): list<string>
        return outline ->filter("v:val =~ "
        \ .. string(join(g:outline_pattern_to_include["cpp"], '|')))
    enddef

    b:FilterOutline = FilterOutline
>

#### Step 2
Add the following to your .vimrc
>
    extend(g:outline_pattern_to_include, {"cpp": ['<KEEP-ME!>']})
>

#### Step 3
Comment each line that you want to keep in the outline with // <KEEP-ME!>

At this point, call :OutlineToggle (or hit <F8> if you are using the
default mapping) and see what happens.
Jumps and localization functions should work automatically.

==============================================================================
CONTRIBUTING                                            *OutlineContributing*

Contributions are more than welcome!

The most obvious contribution is to add a new language. See
|OutlineAddNewLanguages|.  There are plenty TODO in the source code.
Feel free to address any of them.

Another nice contribution could be to add quotes in the quotes.vim file!

And finally, last, but not least, feel free to correct my poor
English grammar! :D

==============================================================================
LICENSE                                                    *OutlineLicense*

BSD 3-Clause License

Copyright (c) 2023, Ubaldo Tiberi.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

* Neither the name of the copyright holder nor the names of its
  contributors may be used to endorse or promote products derived from
  this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

vim:tw=78:et:ft=help:norl:
