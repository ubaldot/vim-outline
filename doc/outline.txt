*outline.txt*                         A trivial and imprecise outline viewer.

               _                            _   _ _             ~
              (_)                          | | | (_)            ~
        __   ___ _ __ ___ ______ ___  _   _| |_| |_ _ __   ___  ~
        \ \ / / | '_ ` _ \______/ _ \| | | | __| | | '_ \ / _ \  ~
         \ V /| | | | | | |    | (_) | |_| | |_| | | | | |  __/  ~
          \_/ |_|_| |_| |_|     \___/ \__,_|\__|_|_|_| |_|\___|  ~
                                                                ~

==============================================================================
CONTENTS                                                     *OutlineContents*

    1. Introduction ................. |OutlineIntroduction|
    2. Requirements ................. |OutlineRequirements|
    3. Usage ........................ |OutlineUsage|
    4. Mappings ..................... |OutlineMappings|
    5. Configuration ................ |OutlineConfiguration|
    6. Contributing ................. |OutlineContributing|
    7. Arbitrary outlines............ |OutlineArbitraryOutlines|
    8. License ...................... |OutlineLicense|


==============================================================================
INTRODUCTION                                          *OutlineIntroduction*

Vim-outline parse the current buffer through a set of regex and slam
the result in a side window. That's all!

The set of regex can be user-defined or it depends on the filetype.

Vim-outline further provides you with the following features:

    a. Locate your current position with respect to the outline,
    b. Jump from outline entries to the corresponding buffer lines,
    c. Feed you with random motivational quotes picked from our quotes
       database if a 'filetype' is not supported.

Not so many languages are supported, but you can contribute by adding support
for more, see |OutlineAddNewLanguages|.

I wrote vim-outline mainly for myself because I had some issue when using
Vista with ALE and Tagbar is based on tags, which is a feature that I don't
really use. I also tried some outline provided by some LSP but I was not
convinced.

What I needed was something easily configurable, fast and reliable that just
support me to get my job done, no matter if lacks bells and whistles and if
the outcome is just an imprecise sketch of my buffer with noisy entries.

How it works internally?

It first |filter()| the lines of your buffer to select what you want to show,
and then it sanitizes the results to give a nice appearance.
Both the filtering and sanitation are based on a set of regex that
depends on the buffer |'filetype'|.

By hitting Enter on any line in the outline window, the cursor will jump
in the corresponding position in the main buffer.

==============================================================================
REQUIREMENTS                                         *OutlineRequirements*

Outline is written in Vim9script, therefore you need at least Vim 9.0.
That is pretty much all. No ctags, nor LSP servers required.

==============================================================================
USAGE                                                     *OutlineUsage*

                                                        *:OutlineToggle*
Run |:OutlineToggle| [{regex}] to open/close a side-window with an outline
of your current buffer.
If {regex} is not passed, the the outline will be filled depending on the
filetype.

                                                        *:OutlineGoToOutline*
Run |:OutlineGoToOutline| to jump in the outline window.
This command comes handy when you have many windows opened in the same tab
and you want to jump directly to the outline window with one key-press.

                                                        *:OutlineRefresh*
Run |:OutlineRefresh| to update both the outline and the highlighting.

==============================================================================
MAPPINGS                                                *OutlineMappings*

<F8>   or   <Plug>OutlineToggle
Open and close the side-window outline.

<leader>l   or   <Plug>OutlineRefresh
Refresh the outline side-window and the localization.

<leader>o   or   <Plug>OutlineGoToOutline
Jump into the outline side-window independently of the current buffer.

==============================================================================
CONFIGURATION                                        *OutlineConfiguration*

                                                        *g:outline_buf_name*
Type: |string|
Default: "Outline!"
Name of the Outline buffer.

                                                        *g:outline_autoclose*
Type: |bool|
Default: true
If true, automatically close the outline window when you leave it.

                                                        *g:outline_win_size*
Type: |number|
Default: 30
Size of the outline window in number of columns unit.

                                                *g:outline_enable_highlight*
Type: |bool|
Default: true
Enable (true) or disable (false) the highlighting.

                                                    *g:outline_patterns*
Type: |dict|<|'filetype', |list|<|Funcref|>>
Default:{}

For each 'filetype' there is a |list| of |Funcref| that is used to filter the
main buffer through the |filter()| function.

Example:
>vim
  g:outline_patterns = {
    java: [
      (_, val) => val =~ '\v(^\s*class |^\s*public |^\s*private |\s*protected )'
    ],
    go: [(_, val) => val =~ '\v(^func |^type )'],
    odin: [(_, val) => val =~ '\v^[a-zA-Z0-9]+ :: ']
  }
<

                                                  *g:outline_sanitizers*
Type: |dict|<|'filetype', |list|<|dict|<|string|, |string||>>>
Default:{}

For each 'filetype' there is a |list| of |dict|<|string|, |string|> that is used
to sanitize the filtered results through the |substitute()| function.

Example:

>vim
  g:outline_sanitizers = {
    tex: [
    {'\\section{\(.*\)}': '\1'},
    {'\\subsection{\(.*\)}': '  \1'},
    {'\\subsubsection{\(.*\)}': '    \1'},
    {'\\subsubsubsection{\(.*\)}': '      \1'}
    ]
  }
<
The keys of the dictionaries are the {pat} and the values are the {sub} of
|substitute()|.

Note: the default values will be overwritten!

==============================================================================
ADD NEW LANGUAGES                                     *OutlineAddNewLanguages*

To add a new language, you simply have to update the variables patterns and
sanitizers in ./autoload/regex.vim with new regex and test if it works!

More precisely, the process for creating an Outline happens in two steps:
  1. filter -> capture the lines that you want to place in the outline,
  2. sanitize -> the lines may be visually ugly, so you can make them nicer
     before you place them in the Outline buffer.

==============================================================================
ARBITRARY OUTLINES                                 *OutlineArbitraryOutlines*

You can create arbitrary outlines for specific, as explained next.
We assume that you want to do this for `text` |'filetype'|.

# Step 1~
Add the following lines to your |.vimrc|
>
  g:outline_patterns = {text: [(_, val) => val =~ '<KEEP-ME!>']}
  g:outline_sanitizers = {text: [{'KEEP': 'KISS'}]}
>
# Step 2~
Comment each line that you want to keep in the outline with `// <KEEP-ME!>` in
any file that has text as 'filetype'.

At this point, call |:OutlineToggle| and see what happens.
All the lines that contain '<KEEP-ME>' are held, and all the 'KEEP' are
replaced with 'KISS'.
Jumps and localization functions should work automatically.

==============================================================================
CONTRIBUTING                                            *OutlineContributing*

Contributions are more than welcome!

The most obvious contribution is to add a new language. See
|OutlineAddNewLanguages|.  There are plenty TODO in the source code.
Feel free to address any of them.

Another nice contribution could be to add quotes in the quotes.vim file!

And finally, last, but not least, feel free to correct my poor
English grammar! :D

==============================================================================
LICENSE                                                    *OutlineLicense*

BSD 3-Clause License

Copyright (c) 2025, Ubaldo Tiberi.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

* Neither the name of the copyright holder nor the names of its
  contributors may be used to endorse or promote products derived from
  this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

vim:tw=78:et:ft=help:norl:
